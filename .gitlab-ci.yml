stages:
  - build
  - push
  - deploy
  - cleanup


build:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  variables:
    # When using dind service we need to instruct docker, to talk with
    # the daemon started inside of the service. The daemon is
    # available with a network connection instead of the default
    # /var/run/docker.sock socket. docker:19.03-dind does this
    # automatically by setting the DOCKER_HOST in
    # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
    #
    # The 'docker' hostname is the alias of the service container as described at
    # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
    #
    # Note that if you're using the Kubernetes executor, the variable should be set to
    # tcp://localhost:2376/ because of how the Kubernetes executor connects services
    # to the job container
    # DOCKER_HOST: tcp://localhost:2376/
    #
    # When using dind, it's wise to use the overlayfs driver for
    # improved performance.
    DOCKER_DRIVER: overlay2
    # Specify to Docker where to create the certificates, Docker will
    # create them automatically on boot, and will create
    # `/certs/client` that will be shared between the service and
    # build container.
    DOCKER_TLS_CERTDIR: "/certs"

  # image: registry.caffeina.co/open-source/docker-gitlab-ci:latest
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - printenv $(echo "${CI_COMMIT_REF_NAME}_APP_ENV") > ./.env
    - echo $CI_PROJECT_NAME
  script:
    - ./cmd/prod.sh build
  only:
    - master
    - beta

push:
  stage: push
  image: registry.caffeina.co/open-source/docker-gitlab-ci:latest    
  script:
    # Env
    - printenv ${ENV_FILE} > ./.env
    # Deploy
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - ./cmd/prod.sh push
    # Cleanup
    - rm -rf ${DOCKER_CERT_PATH}
  only:
    - master
    - beta

deploy:
  stage: deploy
  image: registry.caffeina.co/open-source/docker-gitlab-ci:latest  
  variables: 
    DOCKER_TLS_VERIFY: "1"
    DOCKER_CERT_PATH: ./certs
  script:
    # Env
    - printenv ${ENV_FILE} > ./.env
    # Certs
    - mkdir -p ${DOCKER_CERT_PATH}
    - printenv ${DOCKER_MACHINE_CA} > ${DOCKER_CERT_PATH}/ca.pem
    - printenv ${DOCKER_CLIENT_CERT} > ${DOCKER_CERT_PATH}/cert.pem
    - printenv ${DOCKER_CLIENT_KEY} > ${DOCKER_CERT_PATH}/key.pem
    # Deploy
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker-compose -f ${DC_FILE} pull
    - docker-compose -f ${DC_FILE} up -d --remove-orphans
    # Cleanup
    - rm -rf ${DOCKER_CERT_PATH}
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: "https://ghzmdr.tk"
  only:
    - master
    - beta

cleanup:
  stage: cleanup
  image: registry.caffeina.co/open-source/docker-gitlab-ci:latest  
  variables: 
    DOCKER_TLS_VERIFY: "1"
    DOCKER_CERT_PATH: ./certs
  script:
    # Env
    - printenv $(echo "${ENV_FILE") > ./.env
    # Certs
    - mkdir -p ${DOCKER_CERT_PATH}    
    - printenv ${DOCKER_MACHINE_CA} > ${DOCKER_CERT_PATH}/ca.pem
    - printenv ${DOCKER_CLIENT_CERT} > ${DOCKER_CERT_PATH}/cert.pem
    - printenv ${DOCKER_CLIENT_KEY} > ${DOCKER_CERT_PATH}/key.pem
    # Cleanup docker
    - docker system prune --all --volumes -f
    # Cleanup
    - rm -rf ${DOCKER_CERT_PATH}
  when: manual
  only:
    - master
    - beta
